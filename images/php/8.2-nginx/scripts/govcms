#!/bin/bash

set -e

# Function to set ownership of directory if it exists or create it
set_ownership_or_create() {
    local directory=$1
    if [ ! -d "$directory" ]; then
        echo "Creating directory: $directory"
        mkdir -p "$directory"
    fi
    chown -R govcms:govcms "$directory"
    echo "Ownership of $directory set to govcms:govcms"
}

# Function to handle setting ownership for multiple directories
init() {
    set_ownership_or_create "/home/govcms/.cache/composer"
    set_ownership_or_create "/app/web"
    set_ownership_or_create "/app/web/sites"
    set_ownership_or_create "/app/web/sites/default/files"
}

# Function to handle setup
setup() {
    # Add any additional setup steps here
    echo "Running setup..."

    # Check if /app/composer.json exists before proceeding
    if [ ! -f "/app/composer.json" ]; then
        # Create a temporary directory
        temp_dir=$(mktemp -d)

         # Run Composer to create project and tests in the temporary directory
        if [ -n "$GOVCMS_VERSION" ]; then
            composer create-project govcms/govcms:${GOVCMS_VERSION} ${temp_dir} --prefer-dist --remove-vcs
        fi
        
        if [ -n "$GOVCMS_TESTS_VERSION" ]; then
            composer create-project govcms/tests:${GOVCMS_TESTS_VERSION} ${temp_dir}/tests --prefer-dist --remove-vcs
        fi

        # Copy the contents of the temporary directory to /app
        cp -r ${temp_dir}/* /app/

        # Remove the temporary directory
        rm -rf ${temp_dir}
    else
        echo "/app/composer.json already exists. Skipping setup."
    fi
}

# Function to handle install
install() {
    # Add install steps here
    echo "Running install..."

    # Check if /app/web/sites/default/settings.php exists
    if [ ! -f "/app/web/sites/default/settings.php" ]; then
        # Check if /app/composer.lock exists, if not run composer update
        if [ ! -f "/app/composer.lock" ]; then
            # Check if /app/composer.json exists before running composer update
            if [ -f "/app/composer.json" ]; then
                # Run composer update
                echo "Running composer update..."
                cd /app
                composer update --no-interaction --optimize-autoloader
            fi
        else
            echo "Composer lock file already exists. Skipping composer update."
        fi

        # Copy settings.php and set ownership
        echo "Copying settings.php and setting ownership..."
        cp /scripts/drupal/settings.php /app/web/sites/default/settings.php
        chown govcms:govcms /app/web/sites/default/settings.php
        
        # Install the Drupal site using Drush in /app folder
        cd /app
        drush si govcms -y --site-name='GovCMS' --account-pass=password

        # Call config function
        config
    else
        echo "Drupal site already installed. Skipping installation."
    fi
}

# Function to handle config
config() {
    echo "Running config..."
}

# Function to handle start
start() {
    # Add start steps here
    echo "Running start..."

    # Initialize directories
    init

    # Call setup function
    setup

    # Call install function
    install

    # Start Supervisor with the appropriate configuration file based on CI environment variable
    if [ "$CI" = "true" ] || [ "$CI" = "1" ]; then
        echo "Starting Supervisor with supervisord_ci.conf..."
        supervisord -c /etc/supervisor/conf.d/supervisord_ci.conf
    else
        echo "Starting Supervisor with supervisord.conf..."
        supervisord -c /etc/supervisor/conf.d/supervisord.conf
    fi
}

# Main entry point
case "$1" in
    start)
        start
        ;;
    install)
        install
        ;;
    config)
        config
        ;;
    init)
        init
        ;;
    setup)
        setup
        ;;
    *)
        echo "Usage: $0 {start|install|config|init|setup}"
        exit 1
        ;;
esac

exit 0
